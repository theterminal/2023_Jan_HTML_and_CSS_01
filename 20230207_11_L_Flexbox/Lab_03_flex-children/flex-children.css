/* General styling */
* {
  box-sizing: border-box;
}

body {
  font-family: Arial, Helvetica, sans-serif;
  background-color: lightgray;
}

.container {
  /* padding: 12px; */
  border: 2px dashed black;
}

.item {
  padding: 12px;
  font-size: 18px;
  text-transform: uppercase;
  border-radius: 6px;
}

.item:nth-child(1) {
  background-color: #845ec2;
}
.item:nth-child(2) {
  background-color: #0081cf;
}
.item:nth-child(3) {
  background-color: #d65db1;
}
.item:nth-child(4) {
  background-color: #ff9671;
}
.item:nth-child(5) {
  background-color: #00c9a7;
}
.item:nth-child(6) {
  background-color: #c34a36;
}



/**********************************

        FLEXBOX - Children
      
 **********************************/

.container {
  display: flex;
  width: 50%;
  flex-wrap: wrap;
  gap: 6px;
  /* flex-direction: column; */
  justify-content: space-between;
  align-items: center; /* works on the secondary direction */
  margin: 0 auto;
}

/* "flex-shrink" is the shrinking of the element and the lowest value is 1 (0 does nothing) and it is a proportion. If you have an element with "flex-shrink: 1" and an element with "flex-shrink: 2", the one with value 2 will shrink twice as fast as the one with value 1 */

/* "flex-grow" starts with 0 and is a proportion similar to the "flex-shrink" property... */

/* "flex-basis: 150px;" is the starting base size of an elment */

/* "flex: 0 1 auto;" means <flex-grow> <flex-shrink> <flex-basis> */

/* .item{
  flex-shrink: 1;
   flex-grow: 1;
} */

.item:nth-child(4){
  /* flex-shrink: 3; */
  /* flex-grow: 1; */
  flex-basis: 100px;
  /* width: 150px; */
  /* flex: 0 1 auto; */
}

.item:nth-child(5){
  align-self: stretch;
  /* alins the specified element by the secondary axis... */
}


/**************************************

                ORDER
                
 **************************************/

/* "order: " gives the ability to put the elements in the flex container in order.
The default "order" ia 0.
The higher the order number the element goes to the end.
You can use negative numbers too.
If 2 elements have same order number they are ordered by their order in the HTML.
The "order" property has its own usage.
The idea behind it is not to use it all the time for everything... */

/*
.item:nth-child(1){
  order: 1;
}

.item:nth-child(4){
  order: -1;
}

.item:nth-child(3){
  order: 1;
}
*/